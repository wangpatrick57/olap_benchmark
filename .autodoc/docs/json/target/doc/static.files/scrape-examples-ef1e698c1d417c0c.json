{
  "fileName": "scrape-examples-ef1e698c1d417c0c.js",
  "filePath": "target/doc/static.files/scrape-examples-ef1e698c1d417c0c.js",
  "url": "git@github.com:wangpatrick57/parkbench.git/target/doc/static.files/scrape-examples-ef1e698c1d417c0c.js",
  "summary": "The code provided is a self-invoking anonymous function that performs several tasks related to scrolling and updating scraped examples on a web page. It is likely a part of the larger parkbench project, which involves displaying and interacting with code examples.\n\nThe code begins by defining two constants: `DEFAULT_MAX_LINES` and `HIDDEN_MAX_LINES`. These constants determine the maximum number of lines to display when scrolling to a specific location in the code. The `DEFAULT_MAX_LINES` value is set to 5, while `HIDDEN_MAX_LINES` is set to 10.\n\nThe `scrollToLoc` function is then defined. This function takes three parameters: `elt`, `loc`, and `isHidden`. `elt` represents an element on the page that contains code, `loc` represents a specific location within the code, and `isHidden` is a boolean value indicating whether the code is hidden or not. \n\nThe function first checks if the difference between the start and end line of the location is greater than the maximum number of lines allowed. If it is, the function calculates the scroll offset based on the line number of the start line. Otherwise, it calculates the scroll offset based on the middle line of the location. The scroll offset is then used to scroll the code element to the desired location.\n\nThe `updateScrapedExample` function is defined next. This function takes two parameters: `example` and `isHidden`. `example` represents a scraped code example on the page, and `isHidden` is a boolean value indicating whether the code is hidden or not.\n\nThe function first retrieves the location data from the `data-locs` attribute of the example element. This data is expected to be in JSON format. It then initializes a `locIndex` variable to keep track of the current location index.\n\nThe function then selects all elements with the class \"highlight\" within the example element and stores them in the `highlights` array. It also selects the link element within the example element.\n\nIf there is more than one location in the `locs` array, event listeners are added to the \"prev\" and \"next\" buttons within the example element. These event listeners increment or decrement the `locIndex` variable and update the highlighted lines and scroll to the corresponding location.\n\nIf there is an expand button within the example element, an event listener is added to toggle the \"expanded\" class on the example element. When the example is expanded, it scrolls to the first location in the `locs` array.\n\nFinally, the `updateScrapedExample` function is called for each scraped example on the page, passing `false` as the `isHidden` parameter. Additionally, event listeners are added to the \"more-examples-toggle\" elements on the page. When the toggle is clicked, the `updateScrapedExample` function is called for each example within the toggle, passing `true` as the `isHidden` parameter.\n\nOverall, this code is responsible for scrolling to specific locations within code examples and updating the display of scraped examples on a web page. It provides functionality for navigating between different locations within an example and expanding or collapsing examples.",
  "questions": "1. What is the purpose of the `scrollToLoc` function and how does it work?\n- The `scrollToLoc` function is used to scroll to a specific location within an element. It calculates the scroll offset based on the location and the maximum number of lines, and then scrolls the element to that offset.\n\n2. What is the significance of the `DEFAULT_MAX_LINES` and `HIDDEN_MAX_LINES` constants?\n- These constants determine the maximum number of lines to display when scrolling to a location. `DEFAULT_MAX_LINES` is used when the location range is smaller than or equal to the maximum lines, while `HIDDEN_MAX_LINES` is used when the location range is larger than the maximum lines.\n\n3. How does the `updateScrapedExample` function work and what does it do?\n- The `updateScrapedExample` function updates a scraped example element. It parses the location data, handles navigation between different locations, expands or collapses the example, and scrolls to the initial location."
}